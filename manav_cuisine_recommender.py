# -*- coding: utf-8 -*-
"""Manav_cuisine_recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pGECqBu0Y_9Hym7t-O6qIl1w4z8LVbM7
"""

pip install apyori

import pandas as pd
import apyori as apriori

data_manav = pd.read_json("/content/recipies.json")

data_manav['cuisine'].unique()

data_manav['cuisine'].describe()

data_manav['id'].unique

cuisine_counts = data_manav['cuisine'].value_counts().reset_index()

cuisine_counts.columns = ['cuisine', 'num_recipes']

print(cuisine_counts)

def get_ingredients(cuisine):
    # Check if the cuisine type is available in the data
    if cuisine not in data_manav['cuisine'].unique():
        print(f"We don't have recommendations for {cuisine}.")
        return None

    # Get the recipes for the cuisine type
    recipes = data_manav[data_manav['cuisine'] == cuisine]['ingredients']

    # Get the ingredients for each recipe
    ingredients_list = [recipe for recipe in recipes]

    # Run the Apriori algorithm
    support = 100/len(recipes)
    results = list(apriori.apriori(ingredients_list, min_support=support, min_confidence=0.5, min_lift=2))

    # Sort the results by support
    results = sorted(results, key=lambda x: x.support, reverse=True)

    # Get the top group of ingredients
    top_group = list(results[0].items)

    # Get the rules with lift value greater than two
    rules = []
    for result in results:
        for rule in result.ordered_statistics:
            if rule.lift > 2: 
                rules.append(rule)

    # Print the results
    print(f"Top group of ingredients for {cuisine}: {top_group}")
    print("Rules with lift value greater than two:")
    for rule in rules:
        print(f"{rule.items_base} -> {rule.items_add} (lift={rule.lift:.2f})")

# Prompt the user to enter a cuisine type and process the input
while True:
    cuisine = input("Enter a cuisine type (or type 'exit' to quit): ")
    if cuisine.lower() == 'exit':
        break
    get_ingredients(cuisine)

